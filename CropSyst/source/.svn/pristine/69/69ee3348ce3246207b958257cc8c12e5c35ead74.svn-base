#ifndef phenology_2018H
#define phenology_2018H
#include "crop/phenology_A.h"

#include "crop/thermal_time_common.h"
namespace CropSyst
{
   interface_ Thermal_time;
//______________________________________________________________________________
#if ((PHENOLOGY_VERSION==2018))
class Phenology_2018
: public extends_ Phenology_abstract
{
   //_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
   public:
   class Period
   : public  implements_ Phenology::Period
   {
    public: // parameters
      const Crop_parameters_struct::Phenologic_period *parameters;
      bool parameters_owned;
         // actually should be owned/unowned
//abandoned         // parameters may be 0 if the period is not parameterized
//abandoned         // (I.e. the entire growing season)
    public: // state
      nat16 start_day_in_season;
      CORN::date32 initiated;
      CORN::date32 culminated;
      nat16        day_count; // not sure yet if 0 or 1 based
         // day_count was days_since_start
      //float32 GDDs; // thermal_time_accum; // accumulative
      Thermal_time *thermal_time;
    private:
      const CORN::date32 &simdate_raw;
    public: // structors
      Period
         (const Crop_parameters_struct::Phenologic_period &parameters_
         ,const CORN::date32              &simdate_raw_
         ,const Physical::Temperature     &stress_adjusted_temperature
         ,const Air_temperature_minimum   &air_temperature_min_
         ,bool                             is_fruit_tree_
         ,Thermal_time_common::Vernalization      *vernalization_optional
         ,Thermal_time_common::Photoperiodization *photoperiodization_optional);
      inline virtual ~Period()
      {
         if (parameters_owned) delete parameters;
         /* chrashing? delete thermal_time;*/ thermal_time = 0;
      }

      virtual bool start_day()                                    modification_;
      virtual bool end_day()                                      modification_;
      virtual bool has_expired()                                   affirmation_;
      inline virtual bool get_day_count()             const { return day_count;}
      inline virtual bool is_key_cstr(const char *key)              affirmation_
         {  // parameters will exists
            return (parameters->ontology == key);
         }

      virtual float64 get_thermal_time_accum()                            const;

      virtual float64 calc_relative_thermal_time()                 calculation_;
         // I think rename this to calc_relative_thermal_time_elapsed.
      virtual float64 calc_relative_thermal_time_remaining()       calculation_;

      inline virtual bool clipping_resets()                         affirmation_
         { return
            parameters->relevant & RELEVANT_CLIPPING;
            //181128parameters->clipping_resets;
            }
      inline virtual float32 get_param_duration_GDDs()                     const { return parameters->duration_GDDs; }
      inline virtual float32 get_param_thermal_time_accum()                const { return parameters->initiation.thermal_time_accum; }
   };
   //_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 private:
    const Crop_parameters_struct::Phenology &parameters;
 private:
   CORN::Unidirectional_list periods[4];
   enum Period_enum {pending,active,completed,clipped};
      // Clipped indicates period was removed because
      // the growth stage was removed to reset for clipping.

   float64 GDDs[2];
      // 0 normal
      // 1 clipped
 private: // observation
   cognate_ CORN::Container      *inspectors;   // not owned
   cognate_ const CS::Emanator   *emanator;     // not owned
 public:
   CORN::Unidirectional_list periods_to_activate;

   contribute_ CORN::Unidirectional_list events_realized;
      // This of events (ontology) activated today.
 protected: // quick references to active periods
   contribute_ const Period *germination;

   contribute_ const Period *emergence_event;
   contribute_ const Period *accrescence;
   contribute_ const Period *culminescence;
   contribute_ const Period *senescence;
   contribute_ const Period *quiescence;

   contribute_ const Period *anthesis;
   contribute_ const Period *yield_formation;
   contribute_ const Period *tuberization;
   contribute_ const Period *maturity;

   contribute_ const Period *root_elongation;

   contribute_ const Period *fructescence; // alias to yield_formation
   contribute_ const Period *veraison;
   contribute_ const Period *rapid_fruit_development;
   contribute_ const Period *most_active_period;                                 //181230
 public: // thermal time limitations
   const Physical::Temperature     &stress_adjusted_temperature;
   const Air_temperature_minimum   &air_temperature_min;

   Thermal_time_common::Vernalization        *vernalization;      // owned
   Thermal_time_common::Photoperiodization   *photoperiodization; // owned
   //_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 public: // structors
   Phenology_2018
      (const Crop_parameters_struct::Phenology    &parameters_
       ,const Physical::Temperature               &stress_adjusted_temperature_
       ,const Air_temperature_minimum             &air_temperature_min_
       ,Thermal_time_common::Vernalization        *vernalization_given
       ,Thermal_time_common::Photoperiodization   *photoperiodization_given
       ,bool  is_perennial_
       ,bool  is_fruit_tree_
       ,const CORN::date32 &simdate_raw_
      );
   virtual ~Phenology_2018();
 public: // simulation element implementation
   // These should only be used for output
   virtual CORN::date32 get_emergence_date()                              const; //181111
   virtual CORN::date32 get_restart_date()                                const; //181111
   virtual CORN::date32 get_culminescence_date()                          const; //181111 // was get_initial_fruit_growth_date
   virtual CORN::date32 get_anthesis_date()                               const; //181111
   virtual CORN::date32 get_tuberization_date()                           const; //181111
   virtual CORN::date32 get_maturity_date()                               const; //181111
   virtual CORN::date32 get_fructescence_date()                           const; //181111 // was get_initial_fruit_growth_date
   virtual CORN::date32 get_yield_formation_date()                        const; //181111 // was get_initial_fruit_growth_date
   virtual CORN::date32 get_quiescence_init_date()                        const; //181111
   virtual CORN::date32 get_quiescence_culm_date()                        const; //181111
   virtual CORN::date32 get_rapid_fruit_growth_date()                     const; //181111
 public:
   virtual bool start_day()                                       modification_;
   virtual bool start_season()                                    modification_;
   virtual bool process_day()                                     modification_;
   virtual bool end_day()                                         modification_;
   //181107 renamed virtual bool is_in_vegetative_growth()                          affirmation_;
   virtual bool is_in_germination()                                affirmation_; //181108
   virtual bool has_emerged()                                      affirmation_; //101030 was is_in_season
   virtual bool is_in_accrescence()                                affirmation_;
   virtual bool is_in_senescence()                                 affirmation_;
   virtual bool is_flowering()                                     affirmation_;
   virtual bool is_in_anthesis()                                   affirmation_;
   virtual bool is_in_fructescence()                               affirmation_; //181109
   virtual bool is_in_veraison()                                   affirmation_; //181109
   virtual bool is_in_rapid_fruit_development()                    affirmation_; //181109

   virtual bool is_maturity_first_day()                            affirmation_; //181108
   virtual bool is_maturing()                                      affirmation_; //181108
      // (the crop has reached maturity initiation but not yet culmination);
   virtual bool has_matured_new()                                  affirmation_; //181108
   virtual bool is_in_quiescence()                                 affirmation_; //181108
   virtual bool is_dormant()                                       affirmation_;
   virtual bool is_in_growing_season()                             affirmation_;
   virtual bool is_in_yield_formation()                            affirmation_;
   virtual bool is_in_growth_period()                              affirmation_;
   virtual bool is_in_culminescence()                              affirmation_; //181107

   virtual bool is_in_tuberization()                               affirmation_;
   virtual bool is_early(const Phenology::Period *period,nat16 days) affirmation_; //181108
   virtual bool reset
      (Normal_crop_event_sequence from = NGS_RESTART
      ,Normal_crop_event_sequence to   = NGS_TERMINATED)          modification_;
   virtual void clear_days_since_start_of_harvest()                assignation_;
         // I dont think clear_days_since_start_of_harvest is applicable
         // any more because we now simply create new (active) harvest period
   // get period methods
   inline virtual const Period *get_anthesis_period_active()              const  { return anthesis; }       //181108
   inline virtual const Period *get_root_elongation_period()              const  { return root_elongation;} //181107
   inline virtual const Period *get_accrescence_period()                  const  { return accrescence; }    //181108
   inline virtual const Period *get_culminescence_period()                const  { return culminescence; }  //181108
   inline virtual const Period *get_senescence_period()                   const  { return senescence; }     //181107
   inline virtual const Period *get_yield_formation_period()              const  { return yield_formation;} //181111
   inline virtual const Period *get_maturity_period()                     const  { return maturity; }       //181114

   const Period *Phenology_2018::activate_period(const char *period_ontology)  modification_; //181111
   // These know_methods should actually return Period
   virtual bool activate_sowing()                                                  ; //181108
   virtual bool activate_emergence()                                               ; //181108
   virtual bool activate_accrescence()                                             ; //181108
   virtual bool activate_culminescence()                                           ; //181113
   virtual bool activate_senescence()                                              ; //181113
   virtual bool activate_quiescence();
      //190424    (bool apply_dormancy)                           ; //181108

   virtual bool activate_anthesis()                                                ; //181108
   virtual bool activate_yield_formation()                                         ; //181108
   virtual bool activate_maturity()                                                ; //181108

   virtual bool activate_tuberization()                                            ; //181108
   virtual bool activate_fructescence()                                            ; //181109
   virtual bool activate_veraison()                                                ; //181109
   virtual bool activate_rapid_fruit_development()                                 ; //181109
   virtual Phenology::Period *activate_root_elongation()                                      ; //181118
   virtual bool activate_restart()                                                 ; //181108
   virtual nat8 respond_to_clipping()                                          ; //181108
   virtual bool know_observation
      (CORN::Container      *inspectors_
      ,const CS::Emanator   *emanator_)                              cognition_;
   virtual float64 get_growing_degree_day()                                    ; //181115
   virtual float64 get_accum_degree_days
      (bool adjusted_for_clipping)                                        const; //140619
   virtual inline const float64 &ref_accum_deg_days_normal()               const { return GDDs[0]; }
   inline const float64 &ref_accum_deg_days_adjusted_for_clipping() const { return GDDs[1]; }
   bool was_realized(const char *phenology_ontology)            affirmation_;

   #ifndef RELATIVE_TO_PERIODS
   inline virtual float64 get_thermal_time_cumulative(bool adjusted_for_clipping) const { return GDDs[0]; }
   #endif

 protected:
   bool update_GDDs()                                             modification_; //190104
   nat8 activate_pending_periods
      (CORN::Unidirectional_list &periods_to_activate);

 protected:
   bool register_key_period(Period *potential_key_period);
   nat16 register_key_periods(CORN::Container &potential_key_periods);

 private:
   nat8 realize_events(const CORN::Container &activating_periods) contribution_;
};
//_Phenology_2018___________________________________________________2018-08-11_/
#endif

//______________________________________________________________________________
} //namespace CropSyst
#endif

