#ifndef phenologyH
#define phenologyH
#include "corn/const.h"
#include "corn/primitive.h"
#include "corn/chronometry/date_I.h"
#ifndef growth_stagesHPP
#  include "growth_stages.hpp"
#endif
#include "corn/container/item.h"
namespace CropSyst

#if (PHENOLOGY_VERSION==2018)
#define RELATIVE_TO_PERIODS
//relative to period is not working
#endif
{
//______________________________________________________________________________
interface_ Phenology // was Phenology_interface
{

   virtual bool is_accrescence_initiated()                       affirmation_=0; //190101
   virtual bool know_accrescence_initiated(bool initiated_)        cognition_=0;

   virtual bool is_in_germination()                              affirmation_=0;
   inline virtual bool has_germinated()                         affirmation_
      { return has_emerged(); }
   virtual bool has_emerged()                                   affirmation_=0; //101030 was is_in_season
   virtual bool is_in_accrescence()                              affirmation_=0;
   inline virtual bool is_in_vegetative_growth()                 affirmation_    //181107 deprecate
      { return is_in_accrescence(); }                                             //181107
   virtual bool is_flowering()                                   affirmation_=0;
      // alias to is_in_anthesis
   virtual bool is_in_anthesis()                                 affirmation_=0;


   virtual bool is_in_tuberization()                             affirmation_=0; //150825
   virtual bool is_in_yield_formation()                          affirmation_=0;
      //obsolete use is_in_yield_formation virtual bool is_in_filling()                                  affirmation_;   //181108
   virtual bool is_in_fructescence()                             affirmation_=0; //181109
   virtual bool is_in_veraison()                                 affirmation_=0; //181109
   virtual bool is_in_rapid_fruit_development()                  affirmation_=0; //181109

   virtual bool is_in_culminescence()                            affirmation_=0; //181107
   virtual bool is_in_senescence()                               affirmation_=0; //141125

   virtual bool is_maturity_first_day()                          affirmation_=0;
   virtual bool is_maturing()                                    affirmation_=0; //181108
      // (the crop has reached maturity initiation but not yet culmination);
   inline virtual bool is_mature_obsolete()                      affirmation_    {assert (false); return false;};
      // replaced with is_maturing
      // (the crop has reached maturity initiation but not yet culmination);
   virtual bool has_matured_obsolete()                           affirmation_    {assert (false); return false; };
      //conceptual rename this to is_matured() which is_mature() or later
      // and reimplement has_matured_new() as if currenty after maturity culmination
   virtual bool has_matured_new()                                affirmation_=0;
       // currenty after maturity culmination  (not maturing)
   inline virtual bool is_matured()                              affirmation_    //181108
      { return is_maturing() || has_matured_new() || is_in_quiescence() ; }
   virtual bool is_harvestable()                                 affirmation_=0; //181109
   virtual bool is_harvested()                                   affirmation_=0; //170820
   virtual bool is_in_quiescence()                               affirmation_=0; //181108
   virtual bool is_dormant()                                     affirmation_=0;
   virtual bool is_in_growth_period()                            affirmation_=0;
   virtual bool is_in_growing_season()                           affirmation_=0; //130903

   //___________________________________________________________________________
   virtual void clear_days_since_start_of_harvest()              assignation_=0;
   virtual nat16 day_of_season()                                        const=0;
   virtual const nat16 &ref_day_of_season()                             const=0;

   virtual bool activate_sowing()                                            =0;
   virtual bool activate_emergence()                                         =0;
   virtual bool activate_accrescence()                                       =0;
   virtual bool activate_culminescence()                                     =0; //181113
   virtual bool activate_senescence()                                        =0; //181113
   virtual bool activate_quiescence()                                        =0; //190424
      //190424 (bool  apply_dormancy)                    =0;

   virtual bool activate_anthesis()                                          =0;
   virtual bool activate_yield_formation() /*know_filling() */               =0;
   virtual bool activate_maturity()                                          =0;

   virtual bool activate_tuberization()                                      =0;
      // rename to activate_yield_formation
   virtual bool activate_fructescence()                                      =0; //181109
   virtual bool activate_veraison()                                          =0; //181109
   virtual bool activate_rapid_fruit_development()                           =0; //181109
   virtual bool activate_restart()                                           =0;

   // Harvest and harvestable are not phenologic events so should not be in phenology
   virtual bool activate_harvestable()                                       =0;
   virtual bool activate_harvest()                                           =0;
   #ifndef RELATIVE_TO_PERIODS
   virtual float64 get_thermal_time_cumulative(bool adjusted_for_clipping) const=0;
   #endif

   #if (!PHENOLOGY_VERSION || (PHENOLOGY_VERSION==2013))
   virtual nat16 get_days_since_start_of(Normal_crop_event_sequence event) const=0;
   inline virtual bool started_today(Normal_crop_event_sequence growth_stage) affirmation_ //130903
      { return get_days_since_start_of(growth_stage) == 1; }
   virtual Normal_crop_event_sequence get_growth_stage_sequence()       const=0;
         //130425  rename this to get_event_index()
   virtual const CORN::Date_const &get_initiation_date                           //160609_151005
      (Normal_crop_event_sequence growth_stage)                         const=0;
   virtual nat16 get_start_day_in_season
      (Normal_crop_event_sequence growth_stage)                         const=0; //160523
      // The number days since the start of the season() including today (1 based)
      // Typically since planting date, but may be restart date in
      // perennial/dormant crops.
   virtual nat16 get_duration_of(Normal_crop_event_sequence growth_stage)const=0;//160609
      // I beleive this is in days if so rename get_duration_days
   virtual bool is_early
      (Normal_crop_event_sequence growth_stage,nat16 days)       affirmation_=0; //181108
   #endif
   #if ((PHENOLOGY_VERSION==2018))
   interface_ Period
   : public extends_interface_ CORN::Item
   {
      virtual bool start_day()                                  modification_=0;
      virtual bool end_day()                                    modification_=0;
      virtual bool has_expired()                                 affirmation_=0;
      virtual bool get_day_count()                                      const=0;
      virtual float64 get_thermal_time_accum()                          const=0;

      virtual float64 calc_relative_thermal_time()               calculation_=0;
         // I think rename this to calc_relative_thermal_time_elapsed.
      virtual float64 calc_relative_thermal_time_remaining()     calculation_=0;

      virtual bool clipping_resets()                             affirmation_=0;
      virtual float32 get_param_duration_GDDs()                         const=0;
      virtual float32 get_param_thermal_time_accum()                    const=0;
   };
   // get period methods
   virtual const Period *get_anthesis_period_active()                   const=0; //181107
   virtual const Period *get_root_elongation_period()                   const=0; //181107
   virtual const Period *get_yield_formation_period()                   const=0; //181111
   virtual const Period *get_accrescence_period()                       const=0; //181107
   virtual const Period *get_culminescence_period()                     const=0; //181107
   virtual const Period *get_senescence_period()                        const=0; //181107
   virtual const Period *get_maturity_period()                          const=0; //181107
   virtual bool is_early(const Period *period,nat16 days)        affirmation_=0; //181108
   virtual nat8 respond_to_clipping()                                        =0; //181108
      // returns the phenologic periods that were reset if any
   virtual float64 get_growing_degree_day()                                  =0; //181115
   #ifndef RELATIVE_TO_PERIODS
   virtual inline const float64 &ref_accum_deg_days_normal()            const=0; //181231
   #endif
   #endif
   virtual nat16 get_season_duration_days()                             const=0; //181111
   virtual CORN::date32 get_planting_date()                             const=0; //181111
   virtual CORN::date32 get_restart_date()                              const=0; //181111
   virtual CORN::date32 get_emergence_date()                            const=0; //181111
   virtual CORN::date32 get_anthesis_date()                             const=0; //181111
   virtual CORN::date32 get_tuberization_date()                         const=0; //181111
   virtual CORN::date32 get_maturity_date()                             const=0; //181111
   virtual CORN::date32 get_yield_formation_date()                      const=0; //181111 // was get_initial_fruit_growth_date
   virtual CORN::date32 get_culminescence_date()                        const=0; //181111 // was get_initial_fruit_growth_date
   virtual CORN::date32 get_quiescence_init_date()                      const=0; //181111
   virtual CORN::date32 get_quiescence_culm_date()                      const=0; //181111
   //181113#ifdef CROP_ORCHARD
   virtual CORN::date32 get_fructescence_date()                         const=0; //181111 // was get_initial_fruit_growth_date
   //virtual CORN::date32 get_bud_break_date()                            const=0; //181111
   virtual CORN::date32 get_rapid_fruit_growth_date()                   const=0; //181111
      //deleteme virtual CORN::date32 get_chill_requirement_satisfied_date()    const=0; //181111
   //18113 #endif

//NYI   inline virtual const CORN::Date &get_maturity_date()                    const = 0; //141202
};
//______________________________________________________________________________
} // namespace CropSyst
#endif

