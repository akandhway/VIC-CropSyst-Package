#include "crop/crop_root_V5.h"
#include "crop/thermal_time.h"
#include "soil/soil_I.h"

namespace CropSyst {
//______________________________________________________________________________
Crop_root_vital_V5::Crop_root_vital_V5
(const Crop_parameters_struct::Root      &parameters_
#if (!PHENOLOGY_VERSION || (PHENOLOGY_VERSION==2013))
,const Crop_parameters_struct::Phenology &phenology_parameters_
,const Thermal_time_immutable            &thermal_time_
#endif
#if ((PHENOLOGY_VERSION==2018))
,const Phenology::Period                 &root_growth_period_                    //181107
#endif
,const Soil::Layers_interface &soil_layers_
,float32                                  initial_root_length_)
: Crop_root_vital
   (parameters_
   #if (!PHENOLOGY_VERSION || (PHENOLOGY_VERSION==2013))
   ,phenology_parameters_,thermal_time_
   #endif
   #if ((PHENOLOGY_VERSION==2018))
   //181108,phenology_                                                                   //181107
   ,root_growth_period_                                                          //181108
   #endif
   ,soil_layers_,initial_root_length_)
, above_ground_biomass(0)
{  biomass = 0.00001;
   // this is just to prevent a div 0 on the first day
}
//_2013-06-24___________________________________constructor:Crop_root_vital_V5_/
float64 Crop_root_vital_V5::calc_root_biomass(float64 *output_root_biomass_by_layer) const
{  // if root_biomass_by_layer array is passed, record the root biomass values by layer
   float64 root_shoot_ratio = parameters.root_shoot_full_ratio;

   #if (!PHENOLOGY_VERSION || (PHENOLOGY_VERSION==2013))
      // value for when root has reached culmination
   float64 accum_thermal_time = thermal_time.get_accum_degree_days(false);
   bool root_growth_period_has_expired =  accum_thermal_time > phenology_parameters.culmination.root_elongation;
   if (!root_growth_period_has_expired)
   {  // We haven't reach culmination yet
      float64 param_culmination_GDDs      = phenology_parameters.culmination.root_elongation;
      float64 param_initiation_emergence  = phenology_parameters.initiation.emergence;
      float64 remaining_GDDs = (param_culmination_GDDs - accum_thermal_time);
      float64 elongation_duration_GDDs = (param_culmination_GDDs - param_initiation_emergence);
      float64 relative_GDDs_remaining = remaining_GDDs / elongation_duration_GDDs;
      root_shoot_ratio =
         parameters.root_shoot_full_ratio +
         (parameters.root_shoot_emergence_ratio - parameters.root_shoot_full_ratio)
            *  pow(relative_GDDs_remaining , 3.0);
   }
/*190101 original
   float64 accum_thermal_time = thermal_time.get_accum_degree_days(false);
   float64 root_shoot_ratio =
      (accum_thermal_time > phenology_parameters.culmination.root_elongation)
      ? parameters.root_shoot_full_ratio
      : parameters.root_shoot_full_ratio +
         (parameters.root_shoot_emergence_ratio - parameters.root_shoot_full_ratio)
            *  pow((  (phenology_parameters.culmination.root_elongation - accum_thermal_time)
                    / (phenology_parameters.culmination.root_elongation - phenology_parameters.initiation.emergence))
                  , 3.0);
*/
   #endif
   #if ((PHENOLOGY_VERSION==2018))

/*
   float64 root_culmination_GDDs = root_growth_period.get_param_duration_GDDs() + root_growth_period.get_param_thermal_time_accum();
   float64 accum_TT = root_growth_period.get_thermal_time_accum();
   float64 emergence_GGDs = root_growth_period.get_param_thermal_time_accum();

   relative_thermal_time_remaining =
      (root_culmination_GDDs - accum_TT)
    / (root_culmination_GDDs - emergence_GGDs);
*/
   if (!root_growth_period.has_expired())
   {
      float64 relative_GDDs_remaining = root_growth_period.calc_relative_thermal_time_remaining();
      /*190102 This was for debugging
      // Not sure why the root_growth_period cum thermal time is including germination period?
      float64 elongation_duration_GDDs = root_growth_period.get_param_duration_GDDs();
      float64 current_GDDs = root_growth_period.get_thermal_time_accum();
      float64 remaining_GDDs           = elongation_duration_GDDs - current_GDDs;
              relative_GDDs_remaining = remaining_GDDs / elongation_duration_GDDs;
      root_shoot_ratio =
      */
         parameters.root_shoot_full_ratio +
         (parameters.root_shoot_emergence_ratio - parameters.root_shoot_full_ratio)
            *  pow(relative_GDDs_remaining , 3.0);
   }
#endif
   float64 calced_root_biomass = above_ground_biomass * root_shoot_ratio;
   calced_root_biomass = std::max<float64>(calced_root_biomass,biomass);
   if (output_root_biomass_by_layer)
      for (uint8 lyr = rooting_layer; (lyr <= soil_layers.count()); lyr++)
      {  float64 root_biomass_lyr = total_fract_root_length[lyr] * calced_root_biomass;
         output_root_biomass_by_layer[lyr] = root_biomass_lyr;
      }
   return calced_root_biomass;
}
//_2006-06-12___________________________________________________________________
} // namespace CropSyst

