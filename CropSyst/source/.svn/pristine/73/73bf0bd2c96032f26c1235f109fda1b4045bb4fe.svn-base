#ifndef thermal_timeH
#define thermal_timeH

#ifndef primitiveH
#  include "corn/primitive.h"
#endif
#include "corn/const.h"
#include "options.h"
#include "crop/crop_param_class.h"
#include "corn/dynamic_array/dynamic_array_T.h"
#include "weather/parameter/WP_air_temperature.h"
#include "CS_suite/observation/CS_observation.h"

#define TT_TODAY     0
#define TT_YESTERDAY 1

namespace CropSyst {
//______________________________________________________________________________
interface_ Thermal_time_immutable  // was Crop_thermal_time_interface_immutable
{
   virtual float64 get_accum_degree_days
      #if (!PHENOLOGY_VERSION || (PHENOLOGY_VERSION==2013))
      (bool adjusted_for_clipping
      ,bool for_yesterday = false)                                      const=0; //140619
      #endif
      #if ((PHENOLOGY_VERSION==2018))
      (bool adjusted_for_clipping_obsolete = false
      ,bool for_yesterday_obsolete = false)                             const=0; //140619
      #endif
   #if (!PHENOLOGY_VERSION || (PHENOLOGY_VERSION==2013))
   virtual const float64 &ref_thermal_time_cumulative()                 const=0;
   #endif
   // status accessors
   virtual float64 get_growing_degree_day()                      const=0;

};
//_2008-08-05___________________________________________________________________
interface_ Thermal_time
: public extends_interface_ Thermal_time_immutable
{
/*
   public:
   class Vernalization
   {
    public:
      enum Status {VERNALIZATION_INACTIVE,VERNALIZATION_START,VERNALIZATION_ACTIVE,VERNALIZATION_END};
      contribute_ Status status;
    public:
      Vernalization(const CropSyst:: Crop_parameters_struct::Vernalization   &_parameters);
      inline bool is_satisfied()                                    affirmation_=0;
      float64 update_factor(float64 temperature)                  rectification_=0;
   };
*/
   //_2011-11-09________________________________________________________________
   virtual double accumulate_degree_days
      (
            // now member ref  CORN::Dynamic_array<float32> *stress_adj_hourly_temperature_optional,
      // The following are optional for unstress crop mode
      #if (!PHENOLOGY_VERSION || (PHENOLOGY_VERSION==2013))
      Normal_crop_event_sequence growth_stage_sequence
      #endif
      //#if ((PHENOLOGY_VERSION==2018))
      //,bool limited                                                              //181111
      //#endif
      )                                                                      =0;
   virtual void reset_to(float64 new_thermal_time)              modification_=0; //040719
      // Some crops such as alfalfa we need to reset thermal time                //040719
      // (I.e. to emergence) when cut so they regrow.                            //040719
   virtual void respond_to_clipping(float64 new_thermal_time)   modification_=0; //040823
      // When annuals crops are clipped the thermal time accumulation is delayed //040823
 public: // modifiers
   virtual void clear_accum_degree_days()                       modification_=0;
   /*181116 vernalization and photoperiod are not passed to constructor
   virtual bool enable_vernalization
      (const CropSyst::Crop_parameters_struct::Vernalization &vernalization_parameters)
                                                                modification_=0; //111109
   */

   virtual bool end_day()                                       modification_=0; //140619
};
//_2015-11-06___________________________________________________________________
} //namespace CropSyst
#endif
// crop_thermal_time.h

