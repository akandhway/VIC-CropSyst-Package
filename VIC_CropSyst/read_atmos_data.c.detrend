#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vicNl.h>

static char vcid[] = "$";

void read_atmos_data(FILE                 *infile,
		     global_param_struct   global_param,
		     int                   file_num,
		     int                   forceskip,
		     double              **forcing_data)
/**********************************************************************
  read_atmos_data
  
  This routine reads in atmospheric data values from a binary/ascii file.

  BINARY
  Binary data are always specified as unsigned or signed ints, and a
  multiplier is used to convert to float.

  atmos variable: type:            model units:
  
  precipitation   unsigned short   mm per file_dt
  temperature       signed short   C
  wind              signed short   m/s

  swap bytes code from Kernighan, Brian W. and Rob Pike, "The practice of
  programming", Addison-Wesley, Reading, Massachusetts, 1999, 267 pp,
  page 206.   		
  
  ASCII
  ASCII data should have the same units as given in the table above.

  
  Supported Input Field Combinations, options in parenthesis optional:
  
  Daily met data and daily model timestep - prec, tmax, tmin, (wind)
  Daily met data and subdaily model timestep - prec, tmax, tmin, (wind)
  
  If the code is modified check;
  * for BINARY, the number of fields is correct
  * get_global flags are implemented
  
  Modifications:
  01/10/00 Modified to read a generic Binary, or ASCII column 
           data file and read the contents into the provided  
           data arrays.                                    KAC

  **********************************************************************/
{
  
  extern option_struct options;
  extern param_set_struct param_set;
  
  int             rec;
  int             skip_recs;
  int             i;
  int             endian;
  int             fields;
  int             Nfields;
  int             day=0;
  int            *field_index;
  unsigned short  ustmp;
  signed short    stmp;
  char            str[MAXSTRING+1];
  char            ErrStr[MAXSTRING+1];

  int perturb = 1;
  int j,k, year, mnth, nday, startyear, endyear, pivotyear, climprecip[12], climtmax[12], climtmin[12];
  int dpm[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  int crec, cfrec, cmnth[12], cday[100][12],countsteps[12];
  int printcheck = 0;
  FILE  *pertfile;
  char  name[100];
  float sum_data[3][100][12], sum[3],pcp_pert[12],tmax_pert[12],tmin_pert[12];
  float sumx[3][12],sumy[3][12],sumxy[3][12],sumx2[3][12], trend[3][12];

  Nfields     = param_set.N_TYPES[file_num];
  field_index = param_set.FORCE_INDEX[file_num];

  
  /** locate starting record **/
  /* if ascii then the following refers to the number of lines to skip,
     if binary the following needs multiplying by the number of input fields */
  skip_recs = (int)((float)(global_param.dt * forceskip)) 
    / (float)param_set.FORCE_DT[file_num];
  if((((global_param.dt < 24 && (param_set.FORCE_DT[file_num] * forceskip) 
	% global_param.dt) > 0)) 
     || (global_param.dt == 24 && (global_param.dt 
				   % param_set.FORCE_DT[file_num] > 0)))
    nrerror("Currently unable to handle a model starting date that does not correspond to a line in the forcing file.");

  /** Error checking - Model can be run at any time step using daily forcing
      data, but if sub-daily data is used, the model must be run at the
      same time step as the data.  That way aggregation and disaggragation 
      techniques are left to the user. **/
  if(param_set.FORCE_DT[file_num] < 24 
     && global_param.dt != param_set.FORCE_DT[file_num]) {
    sprintf(ErrStr,"When forcing the model with sub-daily data, the model must be run at the same time step as the forcing data.  Currently the model time step is %i hours, while forcing file %i has a time step of %i hours.",global_param.dt,file_num,param_set.FORCE_DT[file_num]);
    nrerror(ErrStr);
  }

  if(infile==NULL)fprintf(stderr,"NULL file\n");
  
  /***************************
    Read BINARY Forcing Data
  ***************************/

  if(param_set.FORCE_FORMAT[file_num] == BINARY){
	  
    /** test whether the machine is little-endian or big-endian **/
    i = 1;
    if(*(char *)&i == 1)
      endian = LITTLE;
    else    
      endian = BIG;
	  
    /** if forcing file starts before the model simulation, 
	skip over its starting records **/
    fseek(infile,skip_recs*Nfields*sizeof(short),SEEK_SET);
    if (feof(infile))
      nrerror("No data for the specified time period in the forcing file.  Model stopping...");
	  
    /** Read BINARY forcing data **/
    rec = 0;
	  
    while ( !feof(infile) && (rec * param_set.FORCE_DT[file_num] 
			      < global_param.nrecs * global_param.dt) ) {

      for(i=0;i<Nfields;i++) {
	if(param_set.TYPE[field_index[i]].SIGNED) {
	  fread(&stmp,sizeof(short int),1,infile);
	  if (endian != param_set.FORCE_ENDIAN[file_num]) {
	    stmp = ((stmp & 0xFF) << 8) | ((stmp >> 8) & 0xFF);
	  }
	  forcing_data[field_index[i]][rec] 
	    = (double)stmp / param_set.TYPE[field_index[i]].multiplier;
	}
	else {
	  fread(&ustmp,sizeof(unsigned short int),1,infile);
	  if (endian != param_set.FORCE_ENDIAN[file_num]) {
	    ustmp = ((ustmp & 0xFF) << 8) | ((ustmp >> 8) & 0xFF);
	  }
	  forcing_data[field_index[i]][rec] 
	    = (double)ustmp / param_set.TYPE[field_index[i]].multiplier;
	}
      }
			
      rec++;
			
    }
  }

  /**************************
    Read ASCII Forcing Data 
  **************************/

  else{
	  
    /* skip to the beginning of the required met data */
    for(i=0;i<skip_recs;i++){
      if( fgets(str, MAXSTRING, infile) == NULL )
	nrerror("No data for the specified time period in the forcing file.  Model stopping...");
    }
	  
    /* read forcing data */
    rec=0;

    while( !feof(infile) && (rec * param_set.FORCE_DT[file_num] 
			      < global_param.nrecs * global_param.dt ) ) {
      for(i=0;i<Nfields;i++) 
	fscanf(infile,"%lf", &forcing_data[field_index[i]][rec]);
      fgets(str, MAXSTRING, infile);
      rec++;
    }
  }
  
  if(rec * param_set.FORCE_DT[file_num] 
     < global_param.nrecs * NF ) {
    sprintf(ErrStr,"Not enough records in the forcing file (%i * %i = %i) to run the number of records defined in the global file (%i * %i = %i).  Check forcing file time step, and global file", rec, param_set.FORCE_DT[file_num], 
	    rec*param_set.FORCE_DT[file_num], global_param.nrecs, 
	    global_param.dt, global_param.nrecs*global_param.dt);
    nrerror(ErrStr);
  }


/****
Alan--If perturb is set to 1 in declarations above then adjust met data according to the information in the pertfile
****/

  if(perturb == 1){


/********************************
Alan--Read perturbation file and set perturbation switch variables
If the switch variable is set to 1, then for that variable and that month 
the time series data is detrended with reference to the pivot year.
*********************************/


  pertfile=fopen("./pertfile","r");

  fscanf(pertfile,"%s", name);
  fscanf(pertfile,"%d", &startyear);
  fscanf(pertfile,"%d", &endyear); 
  fscanf(pertfile,"%d", &pivotyear);

  printf("scenario = %s\n", name);
  printf("startyear = %d\n", startyear);
  printf("endyear = %d\n", endyear);
  printf("pivotyear = %d\n", pivotyear); 

  printf("Precip detrend switch:\n"); 
  for (i=0;i<12;i++){ 
    fscanf(pertfile, "%d", &climprecip[i]); 
    printf("%d\n",climprecip[i]); 
  } 
  printf("Tmax detrend switch:\n"); 
  for (i=0;i<12;i++){ 
    fscanf(pertfile, "%d", &climtmax[i]); 
    printf("%d\n",climtmax[i]); 
  } 
  printf("Tmin detrend switch:\n"); 
  for (i=0;i<12;i++){ 
    fscanf(pertfile, "%d", &climtmin[i]); 
    printf("%d\n",climtmin[i]); 
  } 

  printf("Pcp multiplier:\n"); 
  for (i=0;i<12;i++){ 
    fscanf(pertfile, "%f", &pcp_pert[i]); 
    printf("%f\n",pcp_pert[i]); 
  } 

  printf("Tmax perturbation:\n"); 
  for (i=0;i<12;i++){ 
    fscanf(pertfile, "%f", &tmax_pert[i]); 
    printf("%f\n",tmax_pert[i]); 
  } 

  printf("Tmin perturbation:\n"); 
  for (i=0;i<12;i++){ 
    fscanf(pertfile, "%f", &tmin_pert[i]); 
    printf("%f\n",tmin_pert[i]); 
  } 


  fclose(pertfile);


/* Alan -- Extract a monthly timeseries from the forcing data time series*/

printf("Extracting a monthly totals (pcp) or monthly averages (tmax, tmin) \n");

/*initialize variables*/
  crec=0;

for(j=0;j<100;j++){

  for(i=0;i<12;i++) {
    cmnth[i]=0;

    cday[j][i]=0;
  }
  for(i=0;i<12;i++){
    sum_data[0][j][i] = 0;
    sum_data[1][j][i] = 0;
    sum_data[2][j][i] = 0;
  }

}


  for(year = startyear;year <= endyear;year++){
  if((year % 4 == 0) && (((year % 100 == 0) && (year % 400 != 0)) == 0))
      dpm[1] = 29;
    else
      dpm[1] = 28;

    for(mnth = 0;mnth < 12;mnth++){
      if(crec < rec) cmnth[mnth]++;
      
      for(nday = 1;nday <= dpm[mnth];nday++){

	if(crec < rec){
	sum_data[0][year-startyear][mnth] += forcing_data[field_index[0]][crec];
	sum_data[1][year-startyear][mnth] += forcing_data[field_index[1]][crec]/dpm[mnth];
	sum_data[2][year-startyear][mnth] += forcing_data[field_index[2]][crec]/dpm[mnth];
	cday[year-startyear][mnth]++;
	cfrec++;
	}

	crec++;

      }
    } 
  }

  printf("number of records read in extracting the monthly data = %d of total %d\n", cfrec, crec);
  printf("number of records in original atmos array = %d\n", rec);

/*** calculate the trend for each month and variable ***/

/***initialize sum counters***/


  for(j=0;j<12;j++){ 
      countsteps[j]=0;
    for(k=0;k<3;k++){ 
      sumx[k][j] = 0; 
      sumy[k][j] = 0;
      sumxy[k][j] = 0;
      sumx2[k][j] = 0;
      
} 
} 


/*loop through gridded data and load sum variables from the monthly arrays*/


  for(j=0;j<12;j++){
   for(i=0;i<cmnth[j];i++){
countsteps[j]++;
    for(k=0;k<3;k++){

      sumx[k][j] += (i+1);
      sumy[k][j] += sum_data[k][i][j];
      sumxy[k][j] += (i+1)*sum_data[k][i][j]; 
      sumx2[k][j] += (i+1)*(i+1); 
  }   
  }
  }

  for(j=0;j<12;j++){
if(countsteps[j] != cmnth[j]) {
  printf("number of time steps read from the arrays in month %d is not equal to the number of steps loaded from the data files.\n", j);
  exit(0);
}
}

/*calculate trend for each variable and month*/

for(j=0;j<12;j++){ 

  for(k=0;k<3;k++){
	
    trend[k][j] = (countsteps[j]*sumxy[k][j] - sumx[k][j]*sumy[k][j]) / (countsteps[j]*sumx2[k][j] - sumx[k][j]*sumx[k][j]); 
if(printcheck == 1)    printf("trend %d %d = %f\n", k,j,trend[k][j]);

}}


  
/***adjust data in arrays***/

  printf("Perturbing input data\n");

/*initialize variables*/
   crec=0;
   cfrec=0;
   for(i=0;i<3;i++) sum[i] = 0;


  for(year = startyear;year <= endyear;year++){
  if((year % 4 == 0) && (((year % 100 == 0) && (year % 400 != 0)) == 0))
      dpm[1] = 29;
    else
      dpm[1] = 28;

    for(mnth = 0; mnth < 12; mnth++){
      for(nday = 1; nday <= dpm[mnth]; nday++){
      
   if(crec < rec){
   sum[0] += forcing_data[field_index[0]][crec];
   sum[1] += forcing_data[field_index[1]][crec]/dpm[mnth];
   sum[2] += forcing_data[field_index[2]][crec]/dpm[mnth];
   cfrec++;
   }
   
   crec++;
      }


      if(crec <= rec){
/***perturb precip for each day of this month if climprecip switch is set to 1***/

      if(climprecip[mnth] == 1  && sum[0] > 0){
	for(j=(crec-dpm[mnth]); j<crec;j++){
	  forcing_data[field_index[0]][j] *= ((sum[0]+(trend[0][mnth]*(pivotyear - year)))/sum[0]); 
       	}
      }

      for(j=(crec-dpm[mnth]); j<crec;j++){ 
         forcing_data[field_index[0]][j] *= pcp_pert[mnth];
      }

/***perturb tmax for each day of this month if climtmax switch is set to 1***/
      if(climtmax[mnth] == 1){
	for(j=(crec-dpm[mnth]); j<crec;j++){
	  forcing_data[field_index[1]][j] += (trend[1][mnth]*(pivotyear - year)); 
       	}
      }

      for(j=(crec-dpm[mnth]); j<crec;j++){ 
          forcing_data[field_index[1]][j] += tmax_pert[mnth];
      }

/***perturb tmin for each day of this month if climtmin switch is set to 1***/
      if(climtmin[mnth] == 1){
	for(j=(crec-dpm[mnth]); j<crec ;j++){
	  forcing_data[field_index[2]][j] += (trend[2][mnth]*(pivotyear - year)); 
       	}
      }

      for(j=(crec-dpm[mnth]); j<crec;j++){ 
          forcing_data[field_index[2]][j] += tmin_pert[mnth];
      }

      }// end crec < rec if statement


/***reset the sum variables***/      
   for(i=0;i<3;i++) sum[i] = 0;


    } //end of mnth for loop 
  }//end of year for loop



  printf("number of records read and adjusted in perturbation routine = %d\n",cfrec);
  printf("number of records in original array = %d\n", rec);



/*** check the perturbation routine set  ***/

  if(printcheck == 1) {

   crec=0;
   for(i=0;i<3;i++) sum[i] = 0;


  for(year = startyear;year <= endyear;year++){
  if((year % 4 == 0) && (((year % 100 == 0) && (year % 400 != 0)) == 0))
      dpm[1] = 29;
    else
      dpm[1] = 28;

    for(mnth = 0;mnth < 12;mnth++){
      for(nday = 1;nday <= dpm[mnth];nday++){
	if(crec < rec){
   sum[0] += forcing_data[field_index[0]][crec];
   sum[1] += forcing_data[field_index[1]][crec]/dpm[mnth];
   sum[2] += forcing_data[field_index[2]][crec]/dpm[mnth];
	}
   crec++;
      }

      if(crec <= rec && mnth == 0){
//      printf("year= %d mnth= %d pswtch= %d origdata= %f finalvalue= %f trend= %5.5f\n", year, mnth, climprecip[mnth], sum_data[0][year-startyear][mnth],sum[0],trend[0][mnth]);

      printf("year= %d mnth= %d tmaxswtch= %d origdata= %f finalvalue= %f trend= %5.5f\n", year, mnth, climtmax[mnth],sum_data[1][year-startyear][mnth],sum[1],trend[1][mnth]);

//      printf("year= %d mnth= %d tminswtch= %d origdata= %f finalvalue= %f trend= %5.5f\n", year, mnth, climtmin[mnth],sum_data[2][year-startyear][mnth],sum[2],trend[2][mnth]);
      }
     
   for(i=0;i<3;i++) sum[i] = 0;

    }
} // end if for print check

  }
  
 } //end if for perturbation routine
  
}
